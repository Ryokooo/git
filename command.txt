// 检查是否有相应的git版本
$ git
// 设置用户名和邮箱
// 注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
$ git config --global user.name "name"
$ git config --global user.email "email"
// git 创建版本库
// 将相应的文件目录变为git可以管理的创库
$ git init
// 添加文件
$ git add file.name
// 添加所有文件
$ git add .
// 提交到本地创库 -m后面输入的是本次提交的说明
$ git commit -m "commit description"
// 查看git状态 可以查看哪些文件被修改过
$ git status
// 查看具体的被更改的内容
$ git diff file.name
// 查看git的提交版本日志
$ git log
// 输出比较简洁的日志信息
$ git log --pretty=oneline
// 版本回退 HEAD 当前版本 HEAD^上个版本 HEAD^^ 上上个版本 HEAD~n 往上n个版本
$ git reset --hard HEAD^
// 版本回退后回到未来的某个版本 需保证在同一个git.bash中操作
$ git reset --hard commitid
// 如果git.bash已经关闭  找不到对应的commitid可以使用以下命令查看命令历史
$ git reflog
// 每台电脑想要上传到GitHub上必须要对应生成SSH Key 再把SSHKEY添加到github账户上
// 生成sshkey 生成目录默认在C://Users/admin/.ssh中 把文件中id_rsa.pub内容复制到github账户
$ ssh-keygen -t rsa -C "email"
// 添加远程仓库 需首先在github上创建一个repository origin是远程库的名字 可以更改
$ git remote add origin git@github.com:账户名/仓库名.git
// 将本地库中的内容提交到远程仓库
// 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
$ git push -u origin master // 第一次提交 
$ git push origin master // 之后的提交
// 推送其他分支
$ git push origin 分支名
// 分支管理
// 创建并切换到分支 git checkout命令加上-b参数表示创建并切换，相当于以下两条命令:$ git branch dev $ git checkout dev
$ git checkout -b 分支名
// 查看所有分支 * 表示当前所处的分支
$ git branch
// 切换到某个分支
$ git checkout 分支名
// 分支合并 先切换到某个分支 执行命令会把分支名的内容合并到这个分支中
$ git merge 分支名
// 一般使用这种方式来合并分支  会产生合并的commit信息
$ git merge --no-ff -m "commit msgs" 分支名
// 删除分支
$ git branch -d 分支名

// 在广联远程仓库时报错 fatal: remote origin already exists 的解决办法
$ git remote rm origin

// git删除文件后通知远程仓库的步骤
$ git rm file.name
$ git commit -m "commit des"
$ git push origin master

// git 修改文件后通知远程仓库步骤
$ git add file.name
$ git commit -m "commit des"
$ git push origin master

// git在分支工作现场没有提交的时候切换到其他分支或退出需要把工作现场储存起来
$ git stash